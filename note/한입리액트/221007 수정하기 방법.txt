수정하기 구현

본문을 수정할 수 있는 폼이 나타나도록 합니다.
const [isEdit, setIsEdit] = useState(false);
toggleIsEdit = () => setIsEdit(!isEdit); true <-> false 전환되도록합니다.

 

삼항연산자를 이용해 isEdit이 true라면 수정입력폼을, 그렇지 않으면 컨텐츠를 렌더링합니다.



const [localContent, setLocalContent] = useState(); 를 만들어 폼에 입력한 값을 저장하도록 합니다.
그리고 props로 받아온 내용을 useState(content)의 기본값으로 설정합니다.



수정 취소와 수정 완료 버튼으로 바뀌도록 합니다.
마찬가지로 삼항연산자를 이용해 isEdit이 ture라면 나타나도록 하고,
수정 취소에는 handleQuit 함수를 만들어 isEdit을 false로 바꾸고, 입력되어있는 값을 setLocalContent(content)로 원래대로 돌아가게 합니다.



그런데 데이터를 아래에서 위로 올릴 수는 없기 때문에 App.js에서 수정된 데이터를 저장할 함수를 props로 보내야 합니다.
const onEdit = (targetId, newContent)=> {
  setData(
    data.map((it)=>it.id === targetId ? (...it, content:newContent}: it)
  )
}
targetId를 받아와 id가 일치하는 데이터만을 선택해, 우선 기존에 존재하는 데이터를 ...it으로 깔아주고
id가 일치하는 데이터의 content를 newContent로 바꾸어줍니다.
그렇지 않은 경우에는 it을 그대로 반환합니다.



onEdit함수를 props로 전달합니다. App > DiaryList > DiaryItem 
수정완료 버튼에 handleEidt함수를 만들고 받아온 onEdit 함수를 실행하도록 합니다.
 const handleEdit = () => {
      onEdit(id, localContent);
  };
글자가 입력되지 않았다면 포커스하도록 if문을 써 동일하게 기능하도록 합니다.
 const handleEdit = () => {
    if (localContent.length < 5) {
      localContentInput.current.focus();
      return;
    }
정말로 수정할 것인지 확인참을 띄우도록 합니다. 
확인을 누르면 onEdit 함수를 실행해 데이터를 수정하도록 하고,
toggleIsEdit()을 실행하여 수정하기 기능을 끝내도록 합니다.
    if (window.confirm(`${id}번 째 일기를 수정하시겠습니까?`)) {
      onEdit(id, localContent);
      toggleIsEdit();
    }
  };

주소 https://codesandbox.io/s/chapt-6-790r2?file=/src/DiaryItem.js:557-798




list >>> 서버로(post)



view/:param
useParam == id
content

isEdit (false)
editToggle (!isEdit)

isEdit true

{list.map(()=> {
    isEdit ?
    <input>리스트1 list id일치하는 녀석의 값 e.target.value 이녀석이 
    <button>수정완료()=> list업데이트 콘텐츠
    <button>수정취소
    :
    <li>리스트1
    <button>수정하기()=> editToggle
    <button>삭제하기
    })
}












