옵셔널 체이닝
React Js에서 컴포넌트간의 life cycle차이로 인해 종종(아니 자주) undefine에 관한 에러가 생기고는 한다. 

통상적으로는 SampleArr ?? SampleArr.map(el => el)의 형태로 사용을 하였다.

또한 옵셔널체이닝은 ?.앞의 평가대상이 undefined나 null이면 평가를 멈추고 undefined를 반환하며 불필요하게 사용할 시 디버깅에 문제가 있다고 판단되고 있다.

?. 은 연산자가아닌 함수나 대괄호와 함께 동작하는 특별한 문법구조체라는 것을 강조하며 체인을 계속해서 만들면 중첩프로퍼티들에게 안전하게 접근할 수 있다는 장점 및 평가대상이 없어도 괜찮은 종류의 것들일 경우만 선택적으로 사용하라는 요약문이 있다.

이때 undefined로 인한 렌더 오류를 막기위해서 옵셔널체이닝을 적용하여 map함수가 돌때까지의 여유(시간??)을 벌어주는 용도





옵셔널 체이닝이 필요한 이유
이제 막 자바스크립트를 배우기 시작했다면 옵셔널 체이닝이 등장하게 된 배경 상황을 직접 겪어보지 않았을 겁니다. 몇 가지 사례를 재현하면서 왜 옵셔널 체이닝이 등장했는지 알아봅시다.

사용자가 여러 명 있는데 그중 몇 명은 주소 정보를 가지고 있지 않다고 가정해봅시다. 이럴 때 user.address.street를 사용해 주소 정보에 접근하면 에러가 발생할 수 있습니다.





옵셔널 체이닝을 남용하지 마세요.
?.는 왼쪽 평가대상이 없어도 괜찮은 경우에만 선택적으로 사용해야 합니다.

사용자 주소를 다루는 위 예시에서 논리상 user는 반드시 있어야 하는데 address는 필수값이 아닙니다. 그러니 user.address?.street를 사용하는 것이 바람직합니다.

실수로 인해 user에 값을 할당하지 않았다면 바로 알아낼 수 있도록 해야 합니다. 그렇지 않으면 에러를 조기에 발견하지 못하고 디버깅이 어려워집니다.